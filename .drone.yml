kind: pipeline
type: docker
name: default

platform:
  os: linux
  arch: amd64

steps:
  - name: build
    image: golang:1.18
    commands:
      - CGO_ENABLED=1 go build -ldflags "-extldflags \"-static\"" -o release/linux/amd64/drone-runner-aws
    volumes:
      - name: cache
        path: /root/.cache/go-build
    depends_on:
      - clone
  - name: go vet and unit tests
    image: golang:1.18
    commands:
      - go vet ./...
      - go test -cover ./...
    volumes:
      - name: cache
        path: /root/.cache/go-build
    depends_on:
      - build
  - name: check go.mod is up to date
    image: golang:1.18
    commands:
      - cp go.mod go.mod.bak
      - go mod tidy
      - diff go.mod go.mod.bak || (echo "go.mod is not up to date" && exit 1)
    volumes:
      - name: cache
        path: /root/.cache/go-build
    depends_on:
      - build
  - name: golangci-lint
    image: golangci/golangci-lint
    commands:
      - golangci-lint run --timeout 500s
    volumes:
      - name: cache
        path: /root/.cache/go-build
    depends_on:
      - build
  - name: compiler checks
    image: golang:1.18
    commands:
      - release/linux/amd64/drone-runner-aws compile --source='./test_files/compiler/drone_ubuntu.yml' test_files/compiler/drone_pool.yml
      - release/linux/amd64/drone-runner-aws compile --source='./test_files/compiler/drone_windows.yml' test_files/compiler/drone_pool.yml
    depends_on:
      - build
  - name: exec checks
    image: golang:1.18
    commands:
      - DRONE_MAX_POOL_SIZE=1 release/linux/amd64/drone-runner-aws exec test_files/compiler/drone_ubuntu.yml --debug --trace --repo-http='https://github.com/tphoney/bash_plugin' --repo-branch='main' --commit-target='main' --commit-after='7e5f437589cdf071769158ce219b2f443ca13074'
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_ACCESS_KEY_SECRET:
        from_secret: AWS_ACCESS_KEY_SECRET
    depends_on:
      - compiler checks
    when:
      event:
        exclude:
          - pull_request
  - name: windows exec checks
    image: golang:1.18
    commands:
      - |
        echo "version: '1'
        instances:
          - name: windows 2019
            type: amazon
            pool: 1
            limit: 1
            platform:
              os: windows
            spec:
              account:
                region: us-east-2
                access_key_id: $${AWS_ACCESS_KEY_ID}
                access_key_secret: $${AWS_ACCESS_KEY_SECRET}
              ami: ami-04ca7309675983877
              size: t2.medium" > pool.tmp
      - release/linux/amd64/drone-runner-aws exec test_files/compiler/drone_windows.yml --pool pool.tmp --debug --trace --repo-http='https://github.com/tphoney/bash_plugin' --repo-branch='main' --commit-target='main' --commit-after='7e5f437589cdf071769158ce219b2f443ca13074'
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_ACCESS_KEY_SECRET:
        from_secret: AWS_ACCESS_KEY_SECRET
    depends_on:
      - compiler checks
    when:
      ref:
        - refs/heads/master
  - name: delegate checks
    image: golang:1.18
    commands:
      - DRONE_MAX_POOL_SIZE=1 release/linux/amd64/drone-runner-aws delegate > delegate.log 2>&1 &
      - sleep 30
      - cat delegate.log
      - |
        INSTANCE=`curl -d '{"id": "unique-stage-id","correlation_id":"abc1","pool_id":"testpool", "setup_request": {"network": {"id":"drone"}, "platform": { "os":"ubuntu" }}}' -H "Content-Type: application/json" -X POST  http://localhost:3000/setup | cut -d'"' -f 4`
      - |
        curl -d "{\"id\":\"unique-stage-id\",\"instance_id\":\"$INSTANCE\",\"pool_id\":\"testpool\",\"correlation_id\":\"abc1\",\"start_step_request\":{\"id\":\"step4\",\"image\":\"alpine:3.11\",\"working_dir\":\"/tmp\",\"run\":{\"commands\":[\"sleep 30\"], \"entrypoint\":[\"sh\", \"-c\"]}}}" -H "Content-Type: application/json" -X POST  http://localhost:3000/step
      - echo "step status:"$?
      - |
        curl -d "{\"id\":\"unique-stage-id\",\"instance_id\":\"$INSTANCE\",\"pool_id\":\"testpool\",\"correlation_id\":\"abc1\"}" -H "Content-Type: application/json" -X POST  http://127.0.0.1:3000/destroy
      - echo "destroy status:"$?
      - echo "view logs"
      - cat delegate.log
      - echo "stop delegate"
      - kill $(pgrep drone)
      - sleep 10
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_ACCESS_KEY_SECRET:
        from_secret: AWS_ACCESS_KEY_SECRET
    depends_on:
      - compiler checks
    when:
      event:
        exclude:
          - pull_request
  - name: publish
    image: plugins/docker
    pull: if-not-exists
    settings:
      repo: drone/drone-runner-aws
      auto_tag: true
      auto_tag_suffix: linux-amd64
      dockerfile: docker/Dockerfile.linux.amd64
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    when:
      ref:
        - refs/heads/master
        - refs/tags/*
    depends_on:
      - compiler checks
      - exec checks
      - windows exec checks
      - delegate checks
      - golangci-lint
      - go vet and unit tests


volumes:
  - name: cache
    temp: {}

---
kind: pipeline
type: vm
name: build and publish binaries

node:
  cluster: mac1

pool:
  use: osx-anka

steps:
  - name: build linux binary
    image: golang:1
    commands:
      - CGO_ENABLED=1 go build -ldflags "-extldflags \"-static\"" -o drone-runner-aws-linux-amd64
  - name: build mac intel binary
    commands:
      - brew install golang
      - CGO_ENABLED=1 go build -o drone-runner-aws-darwin-amd64
  - name: release
    image: plugins/github-release
    settings:
      files:
        - drone-runner-aws-linux-amd64
        - drone-runner-aws-darwin-amd64
      api_key:
        from_secret: github_token

depends_on:
  - default
trigger:
  ref:
    - refs/tags/*

---
kind: pipeline
type: vm
name: build and publish M1 binaries

node:
  cluster: mac2

pool:
  use: osx-anka-m1

steps:
  - name: build mac arm64 binary
    commands:
      - brew install golang
      - CGO_ENABLED=1 go build -o drone-runner-aws-darwin-arm64
  - name: release
    image: plugins/github-release
    settings:
      files:
        - drone-runner-aws-darwin-arm64
      api_key:
        from_secret: github_token

depends_on:
  - default
trigger:
  ref:
    - refs/tags/*
---

kind: pipeline
type: docker
name: manifest

steps:
  - name: manifest
    image: plugins/manifest
    settings:
      spec: docker/manifest.tmpl
      auto_tag: true
      ignore_missing: true
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username

depends_on:
  - default
trigger:
  ref:
    - refs/heads/master
    - refs/tags/*
