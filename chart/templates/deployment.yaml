apiVersion: apps/v1
kind: Deployment
metadata:
  name: dlite
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dlite.labels" . | nindent 4 }}
    {{- if .Values.global.commonLabels }}
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: 
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "dlite.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.global.commonAnnotations }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "dlite.selectorLabels" . | nindent 8 }}
        {{- if .Values.global.commonLabels }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.podLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "dlite.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "dlite.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 120
      initContainers:
        {{- if .Values.global.database.postgres.installed }}
          {{ include "harnesscommon.initContainer.waitForContainer" (dict "root" . "containerName" "wait-for-postgres" "appName" "postgres") | nindent 8}}
        {{- end }}
        - name: create-db-if-not-exists
          image: postgres
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRES_HOST
            value: {{include "harnesscommon.dbconnectionv2.postgresHost" (dict "context" .) }}
          {{- include "harnesscommon.dbconnectionv2.postgresEnv" (dict "ctx" $ "userVariableName" "POSTGRES_USER" "passwordVariableName" "POSTGRES_PASSWORD") | indent 10 }}
          command:
          - "bin/bash"
          - "-c"
          - echo "SELECT 'CREATE DATABASE dlite' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'dlite')\gexec"  | PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -h ${POSTGRES_HOST}
      containers:
      - name: dlite
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/app/drone-runner-aws", "dlite", "--pool=/etc/config/pool.yml"]
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        resources:
          limits:
            memory: 2Gi
            cpu: 1
          requests:
            memory: 2Gi
            cpu: 1
        env:
        {{- include "harnesscommon.renderSecretsAsEnvironmentVariables" (dict "ctx" $) | indent 8 }}
        - name: DLITE_NAME
          value: {{.Values.dlite.linux_name}}
        - name: DLITE_ACCOUNT_ID
          value: {{.Values.dlite.accountId | quote}}
        - name: DLITE_ACCOUNT_SECRET
          value: {{.Values.dlite.accountSecret | quote}}
        - name: DLITE_MANAGER_ENDPOINT
          value: {{.Values.global.loadbalancerURL}}
        - name: DLITE_PARALLEL_WORKERS
          value: {{.Values.dlite.parallelWorkers | quote}}
        - name: DLITE_POLL_INTERVAL_MILLISECS
          value: {{.Values.dlite.pollIntervalMs | quote}}
        - name: SKIP_PREPARE_SERVER
          value: "true"
        - name: DRONE_TRACE
          value: "true"
        {{- include "harnesscommon.dbconnectionv2.postgresEnv" (dict "ctx" $ "userVariableName" "POSTGRES_USER" "passwordVariableName" "POSTGRES_PASSWORD") | indent 8 }}
        - name: DRONE_DISTRIBUTED_DATASOURCE
          value: {{ include "harnesscommon.dbconnectionv2.postgresConnection" (dict "ctx" $ "database" "dlite" "keywordValueConnectionString" true "userVariableName" "$(POSTGRES_USER)" "passwordVariableName" "$(POSTGRES_PASSWORD)" ) | quote }}
        - name: DRONE_DISTRIBUTED_ENABLED
          value: "true"
        volumeMounts:
        {{- include "harnesscommon.mountRenderedSecretsAsVolumeMounts" (dict "ctx" $) | indent 8}}
        - name: pool-cfg
          mountPath: /etc/config
      volumes:
        {{- include "harnesscommon.renderSecretsAsVolumes" (dict "ctx" $) | indent 8 }}
        - name: pool-cfg
          configMap:
            name: {{.Values.name }}
            items:
            - key: pool
              path: pool.yml
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                  - dlite
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
