#cloud-config
# Package installation
{{ if and (.IsHosted) (eq .Platform.Arch "amd64") }}
packages:
  - wget
{{ else }}
apt:
  sources:
    docker.list:
      source: deb [arch={{ .Platform.Arch }}] https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - wget
  - docker-ce
{{ end }}
{{ if .EnableC4D }}
# Early boot commands to detect NVMe disk
bootcmd:
  - mkdir -p /var/log
  - touch /var/log/nvme-setup.log
  - echo "Starting NVME disk detection at $(date)" >> /var/log/nvme-setup.log
  - lsblk -d >> /var/log/nvme-setup.log 2>&1
  - echo "Looking for any NVME disk (largest) excluding root..." >> /var/log/nvme-setup.log
  - |
    set -e
    ROOT_SRC=$(findmnt -no SOURCE / || true)
    ROOT_BASE=""
    if [ -n "$ROOT_SRC" ]; then
      # Try to get parent disk name; fallback to stripping partition suffix
      ROOT_BASE=$(lsblk -no pkname "$ROOT_SRC" 2>/dev/null || true)
      if [ -z "$ROOT_BASE" ]; then
        ROOT_BASE=$(basename "$ROOT_SRC" | sed 's/[0-9]*$//')
      fi
    fi
    echo "Root source: $ROOT_SRC, root base: $ROOT_BASE" >> /var/log/nvme-setup.log
    # Pick the largest non-root NVMe disk
    NVME_DEV=$(lsblk -bdno NAME,TYPE,SIZE | awk -v rb="$ROOT_BASE" '$1 ~ /^nvme/ && $2=="disk" && $1 != rb {print $1, $3}' | sort -k2,2n | tail -1 | awk '{print $1}')
    if [ -z "$NVME_DEV" ]; then
      # Fallback to first non-root NVMe if size-based selection fails
      NVME_DEV=$(lsblk -dno NAME | awk -v rb="$ROOT_BASE" '/^nvme/ && $1 != rb {print $1; exit}')
    fi
    if [ -n "$NVME_DEV" ]; then
      echo "/dev/$NVME_DEV" > /etc/nvme_device_path
      echo "Selected NVMe disk: /dev/$NVME_DEV" >> /var/log/nvme-setup.log
      ls -la /dev/$NVME_DEV >> /var/log/nvme-setup.log 2>&1
    else
      echo "No suitable NVME disk found (excluding root)" >> /var/log/nvme-setup.log
      echo "Available disks:" >> /var/log/nvme-setup.log
      lsblk >> /var/log/nvme-setup.log 2>&1
    fi
{{ else }}
# NVME setup is disabled
bootcmd:
  - mkdir -p /var/log
  - touch /var/log/nvme-setup.log
  - echo "NVME setup is disabled. Skipping NVME disk detection." >> /var/log/nvme-setup.log
{{ end }}
# Certificate files
write_files:
- path: {{ .CaCertPath }}
  permissions: '0600'
  encoding: b64
  content: {{ .CACert | base64 }}
- path: {{ .CertPath }}
  permissions: '0600'
  encoding: b64
  content: {{ .TLSCert | base64 }}
- path: {{ .KeyPath }}
  permissions: '0600'
  encoding: b64
  content: {{ .TLSKey | base64 }}
# Main runtime commands
runcmd:
  # Enable command tracing
  - set -x
  
  # Configure DNS if needed
  {{ if .ShouldUseGoogleDNS }}
  - echo "DNS=8.8.8.8 8.8.4.4\nFallbackDNS=1.1.1.1 1.0.0.1\nDomains=~." | sudo tee -a /etc/systemd/resolved.conf
  - systemctl restart systemd-resolved
  {{ end }}
  
  # Open healthcheck port
  - ufw allow 9079
  
  {{ if .EnableC4D }}
  # NVMe disk setup
  - |
    # Define logging function
    log_echo() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] $@" | tee -a /var/log/nvme-setup.log
    }
    
    log_echo "Starting NVME disk setup"
    lsblk | tee -a /var/log/nvme-setup.log
    
    # Check if device path file exists
    if [ ! -f /etc/nvme_device_path ]; then
      log_echo "NVMe path file missing; detecting NVMe excluding root..."
      ROOT_SRC=$(findmnt -no SOURCE / || true)
      ROOT_BASE=""
      if [ -n "$ROOT_SRC" ]; then
        ROOT_BASE=$(lsblk -no pkname "$ROOT_SRC" 2>/dev/null || true)
        if [ -z "$ROOT_BASE" ]; then
          ROOT_BASE=$(basename "$ROOT_SRC" | sed 's/[0-9]*$//')
        fi
      fi
      NVME_DEV=$(lsblk -bdno NAME,TYPE,SIZE | awk -v rb="$ROOT_BASE" '$1 ~ /^nvme/ && $2=="disk" && $1 != rb {print $1, $3}' | sort -k2,2n | tail -1 | awk '{print $1}')
      if [ -z "$NVME_DEV" ]; then
        NVME_DEV=$(lsblk -dno NAME | awk -v rb="$ROOT_BASE" '/^nvme/ && $1 != rb {print $1; exit}')
      fi
      if [ -n "$NVME_DEV" ]; then
        DEV_PATH="/dev/$NVME_DEV"
        log_echo "Detected NVME disk: $DEV_PATH"
      else
        log_echo "No suitable NVME disk found. Skipping NVME setup."
        exit 0
      fi
    else
      DEV_PATH=$(cat /etc/nvme_device_path)
      log_echo "Read device path from file: $DEV_PATH"
      
      # Check if device path is empty
      if [ -z "$DEV_PATH" ]; then
        log_echo "NVMe device path is empty. Skipping NVMe setup."
        exit 0
      fi
      
      # Check if device exists
      if [ ! -b "$DEV_PATH" ]; then
        log_echo "NVMe device $DEV_PATH does not exist. Skipping NVMe setup."
        exit 0
      fi
    fi
    
    # At this point we have a valid DEV_PATH
    MOUNT_POINT="/mnt/ephemeral"
    log_echo "Using device: $DEV_PATH"
    log_echo "Using mount point: $MOUNT_POINT"
    
    # Format the disk
    log_echo "Formatting $DEV_PATH as ext4..."
    mkfs.ext4 -F "$DEV_PATH" | tee -a /var/log/nvme-setup.log
    if [ $? -ne 0 ]; then
      log_echo "Failed to format $DEV_PATH. Skipping NVME setup."
      exit 1
    fi
    
    # Mount the disk
    log_echo "Mounting $DEV_PATH to $MOUNT_POINT..."
    mkdir -p "$MOUNT_POINT"
    mount "$DEV_PATH" "$MOUNT_POINT" | tee -a /var/log/nvme-setup.log
    if [ $? -ne 0 ]; then
      log_echo "Failed to mount $DEV_PATH to $MOUNT_POINT. Skipping NVME setup."
      exit 1
    fi
    
    # Bind mount directories
    log_echo "Setting up bind mounts..."
    for dir in /tmp /var/lib/docker /home /harness; do
      name=$(basename "$dir")
      target="$MOUNT_POINT/$name"
      
      log_echo "Processing directory: $dir"
      log_echo "Target directory: $target"
      
      # Ensure source directory exists
      if [ ! -d "$dir" ]; then
        log_echo "Creating source directory $dir as it doesn't exist"
        mkdir -p "$dir"
        chmod 755 "$dir"
      fi
      
      # Create target directory
      log_echo "Creating target directory..."
      mkdir -p "$target"
      
      # Copy existing content
      log_echo "Copying content from $dir to $target..."
      if [ "$(ls -A $dir 2>/dev/null)" ]; then
        cp -a "$dir/"* "$target/" 2>/dev/null || log_echo "Warning: Some files could not be copied"
      else
        log_echo "Source directory is empty"
      fi
      
      # Bind mount
      log_echo "Binding $target to $dir..."
      umount "$dir" 2>/dev/null  # Unmount if already mounted
      mount --bind "$target" "$dir" | tee -a /var/log/nvme-setup.log
      if [ $? -ne 0 ]; then
        log_echo "Failed to bind mount $target to $dir"
      else
        log_echo "Successfully bind mounted $target to $dir"
      fi
      
      # No need for fstab entries in ephemeral VMs
    done
    
    # Verify mounts and log completion
    log_echo "Verifying all mounts:"
    mount | grep -E "$DEV_PATH|$MOUNT_POINT|/tmp|/var/lib/docker|/home|/harness" >> /var/log/nvme-setup.log
    mount | grep -E "$DEV_PATH|$MOUNT_POINT|/tmp|/var/lib/docker|/home|/harness"
    
    # Check if all directories are properly mounted
    log_echo "Checking if all directories are properly mounted:"
    ALL_MOUNTED=false  # Start with false and only set to true if all mounts succeed
    MOUNT_SUCCESS=true  # Track if all mounts in this loop succeed
    
    for dir in /tmp /var/lib/docker /home /harness; do
      if ! mount | grep -q " $dir "; then
        log_echo "WARNING: $dir is not mounted!"
        log_echo "Attempting to mount $dir again..."
        target="$MOUNT_POINT/$(basename $dir)"
        
        # Try to mount again
        umount "$dir" 2>/dev/null
        mount --bind "$target" "$dir" 2>&1 | tee -a /var/log/nvme-setup.log
        if [ $? -ne 0 ]; then
          log_echo "FAILED to mount $dir again"
          MOUNT_SUCCESS=false  # This mount attempt failed
        else
          log_echo "Successfully mounted $dir on retry"
        fi
      else
        log_echo "âœ“ $dir is properly mounted"
      fi
    done
    
    # Only set ALL_MOUNTED to true if all mounts were successful
    if [ "$MOUNT_SUCCESS" = true ] && mount | grep -q " /tmp " && mount | grep -q " /var/lib/docker " && mount | grep -q " /home " && mount | grep -q " /harness "; then
      ALL_MOUNTED=true
      log_echo "All required directories are properly mounted"
    else
      log_echo "Some directories are not properly mounted"
    fi
    
    # Show disk usage
    log_echo "Disk usage:"
    df -h | grep -E "$MOUNT_POINT|/tmp|/var/lib/docker|/home|/harness" >> /var/log/nvme-setup.log
    df -h | grep -E "$MOUNT_POINT|/tmp|/var/lib/docker|/home|/harness"
    
    # No need to show fstab entries since we're not using them for ephemeral VMs
    
    if [ "$ALL_MOUNTED" = true ]; then
      log_echo "NVME setup SUCCESSFUL! All directories properly mounted"
    else
      log_echo "NVME setup INCOMPLETE! Some directories failed to mount"
    fi
  {{ else }}
  # NVME setup is disabled
  - |
    # Define logging function
    log_echo() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] $@" | tee -a /var/log/nvme-setup.log
    }
    log_echo "NVME setup is disabled in configuration. Skipping NVME disk setup."
  {{ end }}
  
  # Download and install lite-engine
  - |
    (/usr/bin/wget --retry-connrefused --retry-on-host-error --retry-on-http-error=503,404,429 --tries=3 --waitretry=3 "{{ .LiteEnginePath }}/lite-engine-{{ .Platform.OS }}-{{ .Platform.Arch }}" -O /usr/bin/lite-engine && echo "Successfully downloaded lite engine binary from primary URL.") || \
    (echo "Primary URL failed for lite-engine. Trying fallback URL..." && /usr/bin/wget --retry-connrefused --retry-on-host-error --retry-on-http-error=503,404,429 --tries=10 --waitretry=10 "{{ .LiteEngineFallbackPath }}/lite-engine-{{ .Platform.OS }}-{{ .Platform.Arch }}" -O /usr/bin/lite-engine && echo "Successfully downloaded lite engine binary from fallback URL.")
  - chmod 777 /usr/bin/lite-engine
  
  # Download and install split_tests if needed
  {{ if .HarnessTestBinaryURI }}
  - wget -nv "{{ .HarnessTestBinaryURI }}/{{ .Platform.Arch }}/{{ .Platform.OS }}/bin/split_tests-{{ .Platform.OS }}_{{ .Platform.Arch }}" -O /usr/bin/split_tests
  - chmod 777 /usr/bin/split_tests
  {{ end }}
  
  # Download and install plugin if needed
  {{ if .PluginBinaryURI }}
  - |
    (wget --retry-connrefused --retry-on-host-error --retry-on-http-error=503,404,429 --tries=3 --waitretry=3 {{ .PluginBinaryURI }}/plugin-{{ .Platform.OS }}-{{ .Platform.Arch }} -O /usr/bin/plugin && echo "Successfully downloaded plugin binary from primary URL.") || \
    (echo "Primary URL failed for plugin. Trying fallback URL..." && /usr/bin/wget --retry-connrefused --retry-on-host-error --retry-on-http-error=503,404,429 --tries=10 --waitretry=10 {{ .PluginBinaryFallbackURI }}/plugin-{{ .Platform.OS }}-{{ .Platform.Arch }} -O /usr/bin/plugin && echo "Successfully downloaded plugin binary from fallback URL.")
  - chmod 777 /usr/bin/plugin
  {{ end }}
  
  # Download and install auto-injection if needed
  {{ if .AutoInjectionBinaryURI }}
  - |
    wget --retry-connrefused --retry-on-host-error --retry-on-http-error=503,404,429 --tries=10 --waitretry=10 -nv "{{ .AutoInjectionBinaryURI }}/{{ .Platform.OS }}/{{ .Platform.Arch }}/auto-injection" -O /usr/bin/auto-injection || \
    wget --retry-connrefused --tries=10 --waitretry=10 -nv "{{ .AutoInjectionBinaryURI }}/{{ .Platform.OS }}/{{ .Platform.Arch }}/auto-injection" -O /usr/bin/auto-injection
  - chmod 777 /usr/bin/auto-injection
  {{ end }}
  
  # Download and install envman for amd64 architecture
  {{ if eq .Platform.Arch "amd64" }}
  - |
    (curl -fL https://github.com/bitrise-io/envman/releases/download/2.4.2/envman-Linux-x86_64 > /usr/bin/envman && echo "Successfully downloaded envman binary from primary URL.") || \
    (echo "Primary URL failed for envman. Trying fallback URL..." && curl -fL https://app.harness.io/storage/harness-download/harness-ti/harness-envman/2.4.2/envman-Linux-x86_64 > /usr/bin/envman && echo "Successfully downloaded envman binary from fallback URL.")
  - chmod 777 /usr/bin/envman
  {{ end }}
  
  # Setup environment and start lite-engine
  - touch /root/.env
  - '[ -f "/etc/environment" ] && cp "/etc/environment" /root/.env'
  - echo "CLOUD_DRIVER={{ .DriverName }}" >> /root/.env
  - /usr/bin/lite-engine server --env-file /root/.env > /var/log/lite-engine.log 2>&1 &
  
  # Setup tmate if enabled
  {{ if .Tmate.Enabled }}
  - mkdir /addon
  {{ if eq .Platform.Arch "amd64" }}
  - |
    (wget -nv https://github.com/harness/tmate/releases/download/1.0/tmate-1.0-static-linux-amd64.tar.xz -O /addon/tmate.xz && echo "Successfully downloaded tmate binary from primary URL.") || \
    (echo "Primary URL failed for tmate. Trying fallback URL..." && wget -nv https://app.harness.io/storage/harness-download/harness-ti/harness-tmate/1.0/tmate-1.0-static-linux-amd64.tar.xz -O /addon/tmate.xz && echo "Successfully downloaded tmate binary from fallback URL.")
  - tar -xf /addon/tmate.xz -C /addon/
  - chmod 777 /addon/tmate-1.0-static-linux-amd64/tmate
  - mv /addon/tmate-1.0-static-linux-amd64/tmate /addon/tmate
  - rm -rf /addon/tmate-1.0-static-linux-amd64/
  {{ else if eq .Platform.Arch "arm64" }}
  - |
    (wget -nv https://github.com/harness/tmate/releases/download/1.0/tmate-1.0-static-linux-arm64v8.tar.xz -O /addon/tmate.xz && echo "Successfully downloaded tmate binary from primary URL.") || \
    (echo "Primary URL failed for tmate. Trying fallback URL..." && wget -nv https://app.harness.io/storage/harness-download/harness-ti/harness-tmate/1.0/tmate-1.0-static-linux-arm64v8.tar.xz -O /addon/tmate.xz && echo "Successfully downloaded tmate binary from fallback URL.")
  - tar -xf /addon/tmate.xz -C /addon/
  - chmod 777 /addon/tmate-1.0-static-linux-arm64v8/tmate
  - mv /addon/tmate-1.0-static-linux-arm64v8/tmate /addon/tmate
  - rm -rf /addon/tmate-1.0-static-linux-arm64v8/
  {{ end }}
  - rm -rf /addon/tmate.xz
  {{ end }}