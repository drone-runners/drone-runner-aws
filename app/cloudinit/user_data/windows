<powershell>
$ProgressPreference = 'SilentlyContinue'
echo "[DRONE] Initialization Starting"

if (${{ .IsHosted }} -eq $false) {
	echo "[DRONE] Installing Scoop Package Manager"
	iex "& {$(irm https://get.scoop.sh)} -RunAsAdmin"

	echo "[DRONE] Installing Git"
	scoop install git --global

	echo "[DRONE] Updating PATH so we have access to git commands (otherwise Scoop.sh shim files cannot be found)"
	$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
}

echo "[DRONE] Setup LiteEngine Certificates"

mkdir "C:\Program Files\lite-engine"
mkdir "{{ .CertDir }}"

$object0 = "{{ .CACert | base64 }}"
$Object = [System.Convert]::FromBase64String($object0)
[system.io.file]::WriteAllBytes("{{ .CaCertPath }}",$object)

$object1 = "{{ .TLSCert | base64 }}"
$Object = [System.Convert]::FromBase64String($object1)
[system.io.file]::WriteAllBytes("{{ .CertPath }}",$object)

$object2 = "{{ .TLSKey | base64 }}"
$Object = [System.Convert]::FromBase64String($object2)
[system.io.file]::WriteAllBytes("{{ .KeyPath }}",$object)

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls

$primaryPluginUrl = "{{ .PluginBinaryURI }}/plugin-{{ .Platform.OS }}-{{ .Platform.Arch }}.exe"
$secondaryPluginUrl = "{{ .PluginBinaryFallbackURI }}/plugin-{{ .Platform.OS }}-{{ .Platform.Arch }}.exe"
$outputFile = "C:\Program Files\lite-engine\plugin.exe"

try {
    echo "[DRONE] Downloading plugin from primary URL"
    Invoke-WebRequest -Uri $primaryPluginUrl -OutFile $outputFile
} catch {
    echo "[DRONE] Primary URL failed for plugin, attempting to download from secondary URL"
    Invoke-WebRequest -Uri $secondaryPluginUrl -OutFile $outputFile
}

$env:Path = 'C:\Program Files\lite-engine;' + $env:Path

# Refresh the PSEnviroment
refreshenv

fsutil file createnew "C:\Program Files\lite-engine\.env" 0
echo "CLOUD_DRIVER={{ .DriverName }}" >> "C:\Program Files\lite-engine\.env"

$primaryLiteEngineUrl = "{{ .LiteEnginePath }}/lite-engine-{{ .Platform.OS }}-{{ .Platform.Arch }}.exe"
$secondaryLiteEngineUrl = "{{ .LiteEngineFallbackPath }}/lite-engine-{{ .Platform.OS }}-{{ .Platform.Arch }}.exe"
$outputFile = "C:\Program Files\lite-engine\lite-engine.exe"

try {
    echo "[DRONE] Downloading lite engine from primary URL"
    Invoke-WebRequest -Uri $primaryLiteEngineUrl -OutFile $outputFile
} catch {
    echo "[DRONE] Primary URL failed for lite engine, attempting to download from secondary URL"
    Invoke-WebRequest -Uri $secondaryLiteEngineUrl -OutFile $outputFile
}

New-NetFirewallRule -DisplayName "ALLOW TCP PORT 9079" -Direction inbound -Profile Any -Action Allow -LocalPort 9079 -Protocol TCP
Start-Process -FilePath "C:\Program Files\lite-engine\lite-engine.exe" -ArgumentList "server --env-file=`"C:\Program Files\lite-engine\.env`"" -RedirectStandardOutput "{{ .LiteEngineLogsPath }}" -RedirectStandardError "C:\Program Files\lite-engine\log.err"

if (${{ .IsHosted }} -eq $true) {
	netsh interface ipv4 add dnsserver "Ethernet" 8.8.8.8 index=1
	netsh interface ipv4 add dnsserver "Ethernet" 1.1.1.1 index=2
	netsh interface ipv4 add dnsserver "Ethernet" 8.8.4.4 index=3
	ipconfig /flushdns
	Write-Host "DNS server added to Ethernet interface."
} 
echo "[DRONE] Initialization Complete"

</powershell>